<templateSet group="NestJS">
  <template name="nest-controller" value="//#region Imports&#10;&#10;import { ClassSerializerInterceptor, Controller, Request, UseInterceptors } from '@nestjs/common';&#10;import { ApiBearerAuth, ApiOkResponse, ApiUseTags } from '@nestjs/swagger';&#10;import { Crud, CrudRequest, Override, ParsedBody, ParsedRequest } from '@nestjsx/crud';&#10;&#10;import { BaseEntityCrudController } from '../../../common/base-entity-crud.controller';&#10;import { ProtectTo } from '../../../decorators/protect/protect.decorator';&#10;import { CrudProxy, mapCrud } from '../../../utils/crud';&#10;import { isNullOrUndefined } from '../../../utils/functions';&#10;&#10;//#endregion&#10;&#10;/**&#10; * A classe que representa o construtor que lida com $Description$&#10; */&#10;@ApiBearerAuth()&#10;@Crud({&#10;  model: {&#10;    type: $Entity$Entity,&#10;  },&#10;  routes: {&#10;    exclude: [&#10;      'updateOneBase',&#10;      'createManyBase',&#10;    ],&#10;  },&#10;})&#10;@UseInterceptors(ClassSerializerInterceptor)&#10;@ApiUseTags('$entity$s')&#10;@Controller('$entity$s')&#10;export class $Entity$Controller extends BaseEntityCrudController&lt;$Entity$Entity, $Entity$Service&gt; {&#10;&#10;  //#region Constructor&#10;&#10;  /**&#10;   * Construtor padrão&#10;   */&#10;  constructor(&#10;    service: $Entity$Service,&#10;  ) {&#10;    super(service);&#10;  }&#10;&#10;  //#endregion&#10;&#10;  //#region Public Methods&#10;&#10;  /**&#10;   * Método que retorna várias informações da entidade&#10;   *&#10;   * @param nestRequest As informações da requisição do NestJS&#10;   * @param crudRequest As informações da requisição do CRUD&#10;   */&#10;  @ProtectTo('$Role$')&#10;  @Override()&#10;  @ApiOkResponse({ type: $Entity$Proxy, isArray: true })&#10;  public getMany(@Request() nestRequest: NestJSRequest, @ParsedRequest() crudRequest: CrudRequest): Promise&lt;CrudProxy&lt;$Entity$Proxy&gt;&gt; {&#10;    return this.base.getManyBase(crudRequest).then(response =&gt; mapCrud($Entity$Proxy, response));&#10;  }&#10;&#10;  /**&#10;   * Método que retorna as informações de uma entidade&#10;   *&#10;   * @param nestRequest As informações da requisição do NestJS&#10;   * @param crudRequest As informações da requisição do CRUD&#10;   */&#10;  @ProtectTo('$Role$')&#10;  @Override()&#10;  @ApiOkResponse({ type: $Entity$Proxy })&#10;  public getOne(@Request() nestRequest: NestJSRequest, @ParsedRequest() crudRequest: CrudRequest): Promise&lt;CrudProxy&lt;$Entity$Proxy&gt;&gt; {&#10;    const entityId = +nestRequest.params.id;&#10;    const { exists } = await this.service.exists([entityId]);&#10;&#10;    if (!exists)&#10;      throw new NotFoundException('A entidade procurada não existe.');&#10;&#10;    return this.base.getOneBase(crudRequest).then(response =&gt; mapCrud($Entity$Proxy, response));&#10;  }&#10;&#10;  /**&#10;   * Método que cria uma nova entidade&#10;   *&#10;   * @param nestRequest As informações da requisição do NestJS&#10;   * @param crudRequest As informações da requisição do CRUD&#10;   * @param payload As informações para a criação da entidade&#10;   */&#10;  @ProtectTo('$Role$')&#10;  @Override()&#10;  @ApiOkResponse({ type: $Entity$Proxy })&#10;  public createOne(@Request() nestRequest: NestJSRequest, @ParsedRequest() crudRequest: CrudRequest, @ParsedBody() payload: Create$Entity$Payload): Promise&lt;CrudProxy&lt;$Entity$Proxy&gt;&gt; {&#10;    return this.service.repository.save(this.getEntityFromPayload(payload)).then(response =&gt; mapCrud($Entity$Proxy, response));&#10;  }&#10;&#10;  /**&#10;   * Método que atualiza uma entidade&#10;   *&#10;   * @param nestRequest As informações da requisição do NestJS&#10;   * @param crudRequest As informações da requisição do CRUD&#10;   * @param payload As informações para a atualização da entidade&#10;   */&#10;  @ProtectTo('$Role$')&#10;  @Override()&#10;  @ApiOkResponse({ type: $Entity$Proxy })&#10;  public async replaceOne(@Request() nestRequest: NestJSRequest, @ParsedRequest() crudRequest: CrudRequest, @ParsedBody() payload: Update$Entity$Payload): Promise&lt;CrudProxy&lt;$Entity$Proxy&gt;&gt; {&#10;    const entityId = +nestRequest.params.id;&#10;    const { exists } = await this.service.exists([entityId]);&#10;&#10;    if (!exists)&#10;      throw new NotFoundException('A entidade procurada não existe.');&#10;&#10;    return await this.service.repository.save(this.getEntityFromPayload(payload, entityId)).then(response =&gt; mapCrud($Entity$Proxy, response));&#10;  }&#10;&#10;  /**&#10;   * Método que deleta uma entidade&#10;   *&#10;   * @param nestRequest As informações da requisição do NestJS&#10;   * @param crudRequest As informações da requisição do CRUD&#10;   */&#10;  @ProtectTo('$Role$')&#10;  @Override()&#10;  @ApiOkResponse({ type: void 0 })&#10;  public async deleteOne(@Request() nestRequest: NestJSRequest, @ParsedRequest() crudRequest: CrudRequest): Promise&lt;void&gt; {&#10;    const entityId = +nestRequest.params.id;&#10;    const { exists } = await this.service.exists([entityId]);&#10;&#10;    if (!exists)&#10;      throw new NotFoundException('A entidade procurada não existe.');&#10;&#10;    return await this.service.repository.remove(new $Entity$Entity({ id: entityId })).then(() =&gt; void 0);&#10;  }&#10;&#10;  //#endregion&#10;&#10;  //#region Private Methods&#10;&#10;  /**&#10;   * Método que retorna as informações de uma entidade a partir das informações do payload&#10;   *&#10;   * @param payload As informações do payload&#10;   * @param entityId A identificação da entidade&#10;   */&#10;  private getEntityFromPayload(payload: Create$Entity$Payload | Update$Entity$Payload, entityId?: number): $Entity$Entity {&#10;    return new $Entity$Entity({&#10;      ...!isNullOrUndefined(entityId) &amp;&amp; { id: entityId },&#10;    });&#10;  }&#10;&#10;  //#endregion&#10;&#10;}&#10;" description="" toReformat="true" toShortenFQNames="true">
    <variable name="Description" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="Entity" expression="capitalize(String)" defaultValue="" alwaysStopAt="true" />
    <variable name="entity" expression="lowercaseAndDash(String)" defaultValue="" alwaysStopAt="true" />
    <variable name="Role" expression="lowercaseAndDash(String)" defaultValue="admin" alwaysStopAt="false" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="nest-service" value="//#region Imports&#10;&#10;import { Injectable } from '@nestjs/common';&#10;import { InjectRepository } from '@nestjs/typeorm';&#10;&#10;import { Repository } from 'typeorm';&#10;&#10;import { BaseCrudService } from '../../../common/base-crud.service';&#10;&#10;//#endregion&#10;&#10;/**&#10; * A classe que representa o serviço que lida com $description$&#10; */&#10;@Injectable()&#10;export class $Entity$Service extends BaseCrudService&lt;$Entity$Entity&gt; {&#10;&#10;  //#region Constructor&#10;&#10;  /**&#10;   * Construtor padrão&#10;   */&#10;  constructor(&#10;    @InjectRepository($Entity$Entity)&#10;    public repository: Repository&lt;$Entity$Entity&gt;,&#10;  ) {&#10;    super(repository);&#10;  }&#10;&#10;  //#endregion&#10;&#10;}&#10;" description="" toReformat="false" toShortenFQNames="true">
    <variable name="description" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="Entity" expression="capitalize(String)" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="ECMAScript6" value="true" />
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="nest-entity" value="//#region Imports&#10;&#10;import { Entity } from 'typeorm';&#10;&#10;import { BaseEntity } from '../../common/base-entity';&#10;&#10;//#endregion&#10;&#10;/**&#10; * A class que representa a entidade que lida com as informações $description$&#10; */&#10;@Entity($name$)&#10;export class $Name$Entity extends BaseEntity {&#10;&#10;  //#region Constructor&#10;&#10;  /**&#10;   * Construtor padrão&#10;   */&#10;  constructor(&#10;    partial: Partial&lt;$Name$Entity&gt; | $Name$Entity,&#10;  ) {&#10;    super();&#10;&#10;    Object.assign(this, { ... partial });&#10;  }&#10;&#10;  //#endregion&#10;  &#10;}&#10;" description="" toReformat="false" toShortenFQNames="true">
    <variable name="description" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="name" expression="snakeCase(String)" defaultValue="" alwaysStopAt="true" />
    <variable name="Name" expression="capitalize(String)" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="ECMAScript6" value="true" />
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="nest-module" value="import { Module } from '@nestjs/common';&#10;import { TypeOrmModule } from '@nestjs/typeorm';&#10;&#10;import { AuthTokenModule } from '../auth-token/auth-token.module';&#10;&#10;@Module({&#10;  imports: [&#10;    AuthTokenModule,&#10;    TypeOrmModule.forFeature([&#10;      $Entity$Entity,&#10;    ]),&#10;  ],&#10;  providers: [&#10;    $Entity$Service,&#10;  ],&#10;  controllers: [&#10;    $Entity$Controller,&#10;  ],&#10;})&#10;export class $Entity$Module {}&#10;" description="" toReformat="false" toShortenFQNames="true">
    <variable name="Entity" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="ECMAScript6" value="true" />
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="nest-proxy" value="//#region Imports&#10;&#10;import { BaseCrudProxy } from '../../../common/base-crud.proxy';&#10;&#10;//#endregion&#10;&#10;/**&#10; * A classe que representa as informações que são enviadas pela API sobre $Description$&#10; */&#10;export class $Name$Proxy extends BaseCrudProxy {&#10;&#10;  //#region Constructor&#10;&#10;  /**&#10;   * Construtor padrão&#10;   */&#10;  constructor(&#10;    entity: $Name$Entity,&#10;  ) {&#10;    super(entity);&#10;&#10;    $END$&#10;  }&#10;&#10;  //#endregion&#10;&#10;}&#10;" description="" toReformat="false" toShortenFQNames="true">
    <variable name="Name" expression="capitalize(String)" defaultValue="" alwaysStopAt="true" />
    <variable name="Description" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="nest-create" value="//#region Imports&#10;&#10;import { ApiModelProperty } from '@nestjs/swagger';&#10;import { IsDefined } from 'class-validator';&#10;&#10;import { BaseCrudCreatePayload } from '../../../common/base-crud-create.payload';&#10;import { DefaultValidationMessages } from '../../../models/enums/default-validation-messages';&#10;&#10;//#endregion&#10;&#10;/**&#10; * A classe que representa o payload enviado para criar $description$&#10; */&#10;export class Create$Entity$Payload extends BaseCrudCreatePayload {&#10;&#10;    $END$&#10;&#10;}&#10;" description="" toReformat="false" toShortenFQNames="true">
    <variable name="description" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="Entity" expression="capitalize(String)" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
</templateSet>